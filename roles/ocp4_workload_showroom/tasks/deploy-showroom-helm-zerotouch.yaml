---
- name: Print Showroom namespace information
  ansible.builtin.debug:
    msg: "Setting up showroom in namespace {{ _showroom_namespace }}"

- name: Setup Namespace
  ansible.builtin.include_tasks: setup-namespace.yaml

- name: Render helm chart with values
  environment:
    KUBECONFIG: "{{ _showroom_kubeconfig | default(omit) }}"
  kubernetes.core.helm_template:
    chart_repo_url: "{{ ocp4_workload_showroom_chart_package_url }}"
    chart_ref: "{{ ocp4_workload_showroom_deployer_chart_name }}"
    chart_version: "{{ ocp4_workload_showroom_deployer_chart_version }}"
    release_name: "{{ ocp4_workload_showroom_name }}"
    release_namespace: "{{ _showroom_namespace }}"
    release_values:
      content:
        title: "{{ ocp4_workload_showroom_content_title }}"
        image: "{{ ocp4_workload_showroom_content_image }}"
        user_data: "{{ _showroom_vars | to_nice_yaml(width=1337, default_style='\"') }}"
        repoUrl: "{{ ocp4_workload_showroom_content_git_repo }}"
        repoRef: "{{ ocp4_workload_showroom_content_git_repo_ref }}"
        antoraPlaybook: "{{ ocp4_workload_showroom_content_antora_playbook }}"
        contentOnly: "{{ ocp4_workload_showroom_content_only | bool | string | lower }}"
        zero_touch_bundle: "{{  ocp4_workload_showroom_zero_touch_bundle }}"
        zero_touch_ui_enabled: "{{ ocp4_workload_showroom_zero_touch_ui_enabled | string | lower }}"

      guid: "{{ guid }}"
      satellite:
        url: "{{ satellite_url | default('') }}"
        org: "{{ satellite_org | default('') }}"
        activationkey: "{{ satellite_activationkey | default('') }}"
      deployer:
        domain: "{{ _deployer_domain }}"
        registry_pull_token: "{{ registry_pull_token | default('') }}"
      route:
        hostSuffix: "{{ _showroom_user | default('') }}"
        omitHost: "{{ (ocp4_workload_showroom_route_omit_host | bool) | ternary('true','false') }}"
      stacked_terminals:
        setup: "{{ ocp4_workload_showroom_stacked_terminals_enable | bool | string | lower }}"
        display_name: "{{ ocp4_workload_showroom_stacked_terminals_display_name }}"
        top: "{{ 'terminal' if ocp4_workload_showroom_terminal_type == 'showroom' else ocp4_workload_showroom_terminal_type }}"
        bottom: "{{ 'terminal' if ocp4_workload_showroom_terminal_type == 'showroom' else ocp4_workload_showroom_terminal_type }}"
      second_terminal_tab:
        setup: "{{ (true if ( ocp4_workload_showroom_second_terminal_tab_enable
                         and not ocp4_workload_showroom_stacked_terminals_enable )
                         else false) | bool | string | lower }}"
        display_name: "{{ ocp4_workload_showroom_second_terminal_tab_display_name }}"
      terminal:
        setup: "{{ ocp4_workload_showroom_terminal_enable | bool | string | lower }}"
        image: "{{ ocp4_workload_showroom_terminal_image }}"
        resources:
          requests:
            cpu: "{{ ocp4_workload_showroom_terminal_requests_cpu }}"
            memory: "{{ ocp4_workload_showroom_terminal_requests_memory }}"
          limits:
            cpu: "{{ ocp4_workload_showroom_terminal_limits_cpu }}"
            memory: "{{ ocp4_workload_showroom_terminal_limits_memory }}"
      wetty:
        setup: "{{ (true if ocp4_workload_showroom_terminal_type == 'wetty' else false) | bool | string | lower }}"
        image: "{{ ocp4_workload_showroom_wetty_image }}"
        resources:
          requests:
            cpu: "{{ ocp4_workload_showroom_terminal_requests_cpu }}"
            memory: "{{ ocp4_workload_showroom_terminal_requests_memory }}"
          limits:
            cpu: "{{ ocp4_workload_showroom_terminal_limits_cpu }}"
            memory: "{{ ocp4_workload_showroom_terminal_limits_memory }}"
        ssh:
          autoSshToBastion: "{{ (true if ocp4_workload_showroom_wetty_ssh_bastion_login | bool else false) | bool | string | lower }}"
          sshAuth: password
          sshHost: "{{ _showroom_user_data.bastion_public_hostname }}"
          sshUser: "{{ _showroom_user_data['users'][_showroom_user].bastion_ssh_user_name | default(_showroom_user_data.bastion_ssh_user_name) }}"
          sshPass: "{{ _showroom_user_data['users'][_showroom_user].bastion_ssh_password | default(_showroom_user_data.bastion_ssh_password) }}"
          sshPort: "{{ _showroom_user_data.bastion_ssh_port | default(22) }}"
          sshOtherHosts: "{{ instances | selectattr('name') | map(attribute='name') | list | default([]) }}"
          terminals: "{{ instances | selectattr('terminals', 'defined') | community.general.json_query('[].{name: name, terminals: terminals}') }}"
      novnc:
        setup: "{{ (true if ocp4_workload_showroom_novnc_enable | bool else false) | bool | string | lower }}"
        image: "{{ ocp4_workload_showroom_novnc_image }}"
        vncServer: "{{ ocp4_workload_showroom_novnc_vnc_server_hostport }}"
        password: "{{ ocp4_workload_showroom_novnc_vnc_server_password }}"
        resources:
          requests:
            cpu: "{{ ocp4_workload_showroom_novnc_requests_cpu }}"
            memory: "{{ ocp4_workload_showroom_novnc_requests_memory }}"
          limits:
            cpu: "{{ ocp4_workload_showroom_novnc_limits_cpu }}"
            memory: "{{ ocp4_workload_showroom_novnc_limits_memory }}"
      cloud:
        setup: "{{ ('false' if auth_cloud_provider | default('none') == 'none' else 'true') | string | lower }}"
        image: "{{ ocp4_workload_showroom_cloud_image }}"
        auth_cloud_provider: "{{ auth_cloud_provider | default('none') }}"
        aws_access_key_id: "{{ aws_sandbox_provision_data.aws_access_key_id | default('') }}"
        aws_secret_access_key: "{{ aws_sandbox_provision_data.aws_secret_access_key | default('') }}"
        aws_web_console_url: "{{ aws_sandbox_provision_data.aws_web_console_url | default('') }}"
        aws_web_console_user_name: "{{ aws_sandbox_provision_data.aws_web_console_user_name | default('') }}"
        aws_web_console_password: "{{ aws_sandbox_provision_data.aws_web_console_password | default('') }}"
        aws_sandbox_account_id: "{{ aws_sandbox_provision_data.aws_sandbox_account_id | default('') }}"
        aws_route53_domain: "{{ aws_sandbox_provision_data.aws_route53_domain | default('') }}"
        aws_default_region: "{{ aws_sandbox_provision_data.aws_default_region | default('') }}"
        azure_subscription: "{{ azure_sandbox_provision_data.azure_subscription | default('') }}"
        azure_tenant: "{{ azure_sandbox_provision_data.azure_tenant_id | default('') }}"
        azure_client_id: "{{ azure_sandbox_provision_data.azure_service_principal_id | default('') }}"
        azure_password: "{{ azure_sandbox_provision_data.azure_service_principal_password | default('') }}"
        azure_resourcegroup: "{{ azure_sandbox_provision_data.azure_resource_group | default('') }}"

      ironrdp:
        setup: "{{ ('true' if ocp4_workload_showroom_ironrdp_enable | bool  else 'false') | string | lower }}"
        image: "{{ ocp4_workload_showroom_ironrdp_image }}"
        server: "windows"
        user: "Administrator"
        password: "{{ _showroom_user_data.windows_password | default('') }}"
        jetserver: "localhost:7171"
        tokengenserver: "localhost:8081"
      runtime_automation:
        setup: "{{ ('false' if ocp4_workload_showroom_automation_disable | bool  else 'true') | string | lower }}"
      setup_automation:
        setup: "{{ ('false' if ocp4_workload_showroom_automation_disable | bool  else 'true') | string | lower }}"
        vault_password: "{{ _showroom_user_data.vault_password | default('') }}"


  register: r_helm_templates

- name: Deploy rendered manifests to OpenShift
  kubernetes.core.k8s:
    kubeconfig: "{{ _showroom_kubeconfig | default(omit) }}"
    definition: "{{ r_helm_templates.stdout | from_yaml_all }}"

# - name: Report Variables
#   ansible.builtin.include_tasks: report-variables.yaml
