---

# Orchestrate showroom containers and setup orchestration pre-requisites
- name: Insert showroom orchestration files, compose, scripts, and systemd
  ansible.builtin.template:
    src: "{{ __orchestration.src }}"
    dest: "{{ __orchestration.dest }}"
    owner: "{{ __orchestration.owner | default(showroom_user) }}"
    group: "{{ __orchestration.group | default(showroom_user_group) }}"
    mode: "{{ __orchestration.mode | default('u=rw,g=r,o=r') }}"
  loop:
    - src: "{{ showroom_container_compose_template | default('container-compose.yml.j2') }}"
      dest: "{{ showroom_user_orchestration_dir }}/container-compose.yml"
    - src: "{{ showroom_systemd_service_template | default('showroom.service.j2') }}"
      dest: "/etc/systemd/system/showroom.service"
      owner: root
      group: root
    - src: "{{ showroom_systemd_service_start | default('showroom-start.j2') }}"
      dest: "/usr/local/bin/showroom-start.sh"
      owner: root
      group: root
      mode: "u=rwx,g=rx,o=rx"
    - src: "{{ showroom_systemd_service_stop | default('showroom-stop.j2') }}"
      dest: "/usr/local/bin/showroom-stop.sh"
      owner: root
      group: root
      mode: "u=rwx,g=rx,o=rx"
  loop_control:
    loop_var: __orchestration

- name: Setup showroom host for nginx for showroom_frontend_service
  when: showroom_frontend_service == "nginx"
  block:

    - name: Setup showroom host with nginx.conf
      ansible.builtin.template:
        src: nginx.conf.j2
        dest: "{{ showroom_user_orchestration_dir }}/nginx.conf"
        owner: "{{ showroom_user }}"
        group: "{{ showroom_user_group }}"
        mode: "u=rw,g=r,o=r"

- name: Enable and Start showroom service
  ansible.builtin.service:
    name: showroom.service
    enabled: true
    state: started

- name: Pause before TLS verification attempts
  when: (showroom_tls_provider | default('zerossl') | lower) != 'none'
  ansible.builtin.pause:
    seconds: 120

- name: Verify TLS and restart on failure (up to 3 retries)
  when: (showroom_tls_provider | default('zerossl') | lower) != 'none'
  ansible.builtin.set_fact:
    f_tls_verified: false

- name: Verify TLS and restart on failure (up to 3 attempts)
  ansible.builtin.include_tasks:
    file: verify_tls_attempt.yml
  loop: "{{ range(1, 4) | list }}"
  loop_control:
    loop_var: tls_attempt
  when:
    - (showroom_tls_provider | default('zerossl') | lower) != 'none'
    - not f_tls_verified | default(false)

- name: Assert TLS became ready
  when: (showroom_tls_provider | default('zerossl') | lower) != 'none'
  ansible.builtin.assert:
    that:
      - f_tls_verified | default(false)
    fail_msg: >-
      TLS not ready after 3 attempts for host '{{ showroom_host }}'.
      Provider='{{ showroom_tls_provider | default('zerossl') }}',
      Challenge='{{ f_acme_challenge_type | default('unknown') }}'.
      We attempted an OpenSSL SNI handshake to
      127.0.0.1:{{ showroom_primary_port | default(443) }}
      using hostname '{{ showroom_host }}',
      and restarted the showroom service between attempts
      when the handshake failed.
      If using HTTP-01 (ZeroSSL), ensure inbound TCP/80 is reachable
      from the Internet and DNS points to this host.
      If using TLS-ALPN-01 (Let's Encrypt), ensure inbound TCP/443
      is reachable and hostname/SNI resolves correctly.
      For troubleshooting, review the reverse-proxy container logs as user
      '{{ showroom_user | default('showroom') }}':
      sudo -u {{ showroom_user | default('showroom') }}
      XDG_RUNTIME_DIR=/run/user/{{ showroom_user_uid }}
      podman logs --tail 200 reverse-proxy
      See ansible/roles/showroom/README.adoc for provider requirements
      and additional tips.
